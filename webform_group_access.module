<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\webform\WebformInterface;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_webform_submission_access().
 */
function webform_group_access_webform_submission_access(WebformSubmissionInterface $webform_submission, $operation, AccountInterface $account) {
  // Load the webform entity.
  $webform = $webform_submission->getWebform();

  // Get the reference field and the required role from the configuration.
  $reference_field = $webform->getThirdPartySetting('webform_group_access', 'reference_field');
  $required_role = $webform->getThirdPartySetting('webform_group_access', 'required_role');

  // If the field is not set, than this functionality is disabled.
  if (!$reference_field) {
    return AccessResult::neutral();
  }

  // Check if the operation is 'view'.
  if ($operation === 'view') {
    // Get the group reference field value.
    $group_id = $webform_submission->getElementData($reference_field);

    // Check if the user is a member of the group.
    if (is_user_in_group_with_role($account, $group_id, $required_role)) {
      return AccessResult::allowed();
    }
  }

  return AccessResult::neutral();
}

/**
 * Check if a user is a member of a specific group.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account.
 * @param int $group_id
 *   The group ID.
 * @param string $role
 *   The role to check for.
 *
 * @return bool
 *   TRUE if the user is a member of the group, FALSE otherwise.
 */
function is_user_in_group_with_role(AccountInterface $account, int $group_id, string $role = null) {
  // Load the group entity.
  $group = \Drupal\group\Entity\Group::load($group_id);
  if ($group) {
    $group_membership = $group->getMember($account);

    // Check if the user is a member of the group.
    if (!$group_membership) {
      return FALSE;
    }

    // Check if the user has the specified role (if set).
    if ($role && !array_key_exists($role, $group_membership->getRoles())) {
      return FALSE;
    }

    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_webform_settings_form_alter().
 */
function webform_group_access_webform_third_party_settings_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var Drupal\webform\EntitySettings\WebformEntitySettingsAccessForm $entity_form */
  $entity_form = $form_state->getFormObject();
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $entity_form->getEntity();

  $form['third_party_settings']['webform_group_access'] = [
    '#type' => 'details',
    '#title' => t('Webform Group Access Settings'),
    '#open' => TRUE,
  ];

  $form['third_party_settings']['webform_group_access']['reference_field'] = [
    '#type' => 'textfield',
    '#title' => t('Group Reference Field'),
    '#description' => t('Enter the machine name of the group reference field.'),
    '#default_value' => $webform->getThirdPartySetting('webform_group_access', 'reference_field'),
  ];

  $form['third_party_settings']['webform_group_access']['required_role'] = [
    '#type' => 'textfield',
    '#title' => t('Required Role in Group'),
    '#description' => t('Enter the machine name of the role required for access.'),
    '#default_value' => $webform->getThirdPartySetting('webform_group_access', 'required_role'),
  ];
}

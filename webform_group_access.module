<?php

use Drupal\Core\Session\AccountInterface;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_webform_submission_access().
 */
function webform_group_access_webform_submission_access(WebformSubmissionInterface $webform_submission, $operation, AccountInterface $account) {
  // Check if the operation is 'view'.
  if ($operation === 'view') {
    // Check if the user has a role that bypasses the group access check.
    if (user_has_bypass_role($account)) {
      return AccessResult::allowed();
    }

    // Get the group reference field value.
    $group_id = $webform_submission->getElementData('group_reference_field_name'); // Replace with your actual field name.

    // Check if the user is a member of the group.
    if (!is_user_in_group($account, $group_id)) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::allowed();
}

/**
 * Check if a user is a member of a specific group.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account.
 * @param int $group_id
 *   The group ID.
 *
 * @return bool
 *   TRUE if the user is a member of the group, FALSE otherwise.
 */
function is_user_in_group(AccountInterface $account, $group_id) {
  // Load the group entity.
  $group = \Drupal\group\Entity\Group::load($group_id);
  if ($group) {
    // Check if the user is a member of the group.
    return !!$group->getMember($account);
  }
  return FALSE;
}

/**
 * Check if the user has a role that bypasses the group access check.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account.
 *
 * @return bool
 *   TRUE if the user has a bypass role, FALSE otherwise.
 */
function user_has_bypass_role(AccountInterface $account) {
  // Define the roles that should bypass the group access check.
  $bypass_roles = ['administrator']; // Add other roles as needed.

  // Check if the user has any of the bypass roles.
  foreach ($bypass_roles as $role) {
    if ($account->hasPermission('administer site configuration') || $account->hasRole($role)) {
      return TRUE;
    }
  }

  return FALSE;
}
